(function () {}()); try { (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (exports) {    "use strict";    var module = {        rows: [],        hideCleanPlunders: hideCleanPlunders,        hideEmptyWallVillages: hideEmptyWallVillages    };    $.extend(exports, module);    var LootAssistantRow = require("./lootAssistantRow.js").LootAssistantRow;    var LootAssistantRowStatus = require("./lootAssistantRow.js").LootAssistantRowStatus;    var LIST_ID = "#plunder_list";    function _init() {        var trs = $(LIST_ID + " tr");        for (var i = 1; i < trs.length; i++) {            module.rows.push(new LootAssistantRow($(trs[i])));        }    }    function hideCleanPlunders() {        module.rows.filter(function (row) {            return row.status === LootAssistantRowStatus.VICTORY;        }).forEach(function (row) {            row.hide();        })    }    function hideEmptyWallVillages() {        module.rows.filter(function (row) {            return row.wall == 0 || Number.isNaN(row.wall);        }).forEach(function (row) {            row.hide();        })    }    _init();})(module.exports);
},{"./lootAssistantRow.js":3}],2:[function(require,module,exports){
(function (exports) {    "use strict";    var module = {        sendTroops: sendTroops    };    $.extend(exports, module);    function sendTroops(troops) {        $("#unit_input_spear").val(troops.spearFighter || "");        $("#unit_input_sword").val(troops.swordsman || "");        $("#unit_input_axe").val(troops.axeman || "");        $("#unit_input_spy").val(troops.scout || "");        $("#unit_input_light").val(troops.lightCavalary || "");        $("#unit_input_ram").val(troops.heavyCavalary || "");         $("#unit_input_spear").val(troops.ram || "");        $("#unit_input_catapult").val(troops.catapult || "");        $("#unit_input_knight").val(troops.paladin || "");        $("#unit_input_snob").val(troops.nobleman || "");        var button = document.getElementById('target_attack');        var evObj = document.createEvent('Events');        evObj.initEvent("click", true, false);        button.dispatchEvent(evObj);    }})(module.exports);
},{}],3:[function(require,module,exports){
(function (exports) {    "use strict";    var LootAssistantRowStatus = {        VICTORY: "VICTORY",        PARTIAL_LOSS: "PARTIAL_LOSS",        LOSS: "LOSS"    };    var module = {        LootAssistantRowStatus: LootAssistantRowStatus,        LootAssistantRow: LootAssistantRow    };    $.extend(exports, module);        function LootAssistantRow ($tr) {        var $tds = $tr.find("td");        for (var i = 0; i < $tds.length; i++) {            $tds[i] = $($tds[i]);        }        this.hide = hide;        this.removeReports = removeReports;        this.status = _getStatus($tds[1]);        this.maxLoot = _isMaxLoot($tds[2]);        this.coordinates = _getCoordinates($tds[3]);        this.date = $tds[4].text();        this.wall = Number($tds[6].text());        this.distance = Number($tds[7].text());        this.sendA = sendA;        this.sendB = sendB;        this.sendC = sendC;        this.hasC = $tds[10].find("a").length > 0;        this.openCustomTroops = openCustomTroops;        function removeReports() {            $($tds[0].find("a")).click();        }        function hide() {            $tr.hide();        }        function sendA() {            $tds[8].find("a").click();        }        function sendB() {            $tds[9].find("a").click();        }        function sendC() {            $tds[10].find("a").click();        }        function openCustomTroops() {            $tds[11].find("a").click();        }    }    function _getStatus($td) {        var src = $td.find("img").attr("src");        if (src.match("green")) {            return LootAssistantRowStatus.VICTORY        } else if (src.match("yellow")) {            return LootAssistantRowStatus.PARTIAL_LOSS        } else {            return LootAssistantRowStatus.LOSS;        }    }    function _isMaxLoot($td) {        var src = $td.find("img").attr("src");        return src && src.match("1.png");    }    function _getCoordinates($td) {        var text = $td.find("a").text();        return text.substring(1, 8);    }})(module.exports);
},{}],4:[function(require,module,exports){
(function () {    "use strict";    var lootAssistant = require("../../common/lootAssistant/lootAssistant.js");    var lootAssistantCustomTroops = require("../../common/lootAssistant/lootAssistantCustomTroops.js");    var models = [        {            axeman: 15,            scout: 1,            ram: 3        }, {            axeman: 15,            scout: 1,            ram: 4        }, {            axeman: 30,            scout: 1,            ram: 8        }, {            axeman: 80,            scout: 1,            ram: 12        }    ];    var defaultModel = models[1];    var count = 0;    var troops = {};    function run() {        if (count === lootAssistant.rows.length) {            return;        }        var row = lootAssistant.rows[count++];        var wall = row.wall;        console.debug(wall);        if (Number.isNaN(wall)) {            row.openCustomTroops();            troops = defaultModel;            setTimeout(_send, 3000 + Math.random() * 100)        } else if (wall >= 1 && wall <= 4) {            row.openCustomTroops();            troops = models[wall];            setTimeout(_send, 3000 + Math.random() * 100)        } else {            run();        }    }    run();    function _send() {        lootAssistantCustomTroops.sendTroops(troops);        setTimeout(run, 3000 + Math.random() * 100)    }})();
},{"../../common/lootAssistant/lootAssistant.js":1,"../../common/lootAssistant/lootAssistantCustomTroops.js":2}]},{},[4]) } catch(e) { console.error(e);alert(e); };